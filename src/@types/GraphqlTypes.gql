# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddDocumentInputGraphql {
  capture: String!
  contentIDs: [String!]!
  courseID: ID!
  description: String
  env: String!
  lang: String!
  meta: MetaInputGraphql!
  moduleIDs: [String!]!
  userName: UserNameInputGraphql!
}

type AvatarSizeGraphgl {
  """height"""
  height: Float

  """width"""
  width: Float
}

type ChoiceModelGraphql {
  finish_reason: String!
  index: Int!
  message: MessageModelGraphql!
}

input ComparisonFields {
  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID
}

"""Date custom scalar type"""
scalar Date

type DocumentModelGraphql {
  capture: String!
  contentIDs: [String!]!
  courseID: ID!
  creationDate: Date!
  description: String
  documentID: ID!
  env: String!
  ip: String!
  lang: String!
  meta: MetaObjectGraphql!
  moduleIDs: [String!]!
  pathName: String!
  userName: UserNameObjectGraphql!
}

type ImageDataOpenAiModelGraphql {
  b64_json: String
  url: String
}

input ImageOpenAiInputGraphql {
  n: Int!
  prompt: String!
  response_format: String
  size: String!
}

type ImagesOpenAiModelGraphql {
  created: Int!
  data: [ImageDataOpenAiModelGraphql!]!
}

input MessageAssistantInputGraphql {
  messages: [MessageInputGraphql!]!
  model: String!
  temperature: Float!
}

type MessageAssistantModelGraphql {
  choices: [ChoiceModelGraphql!]!
}

input MessageInputGraphql {
  content: String
  role: String!
}

type MessageModelGraphql {
  content: String
  role: String!
}

type MessengerGraphgl {
  """name"""
  name: String

  """profileName"""
  profileName: String
}

input MetaInputGraphql {
  email: String!
  institution: String!
  isSendingBcc: Boolean!
  specName: String!
  specTitle: String!
}

type MetaObjectGraphql {
  email: String!
  institution: String!
  isSendingBcc: Boolean!
  specName: String!
  specTitle: String!
}

type Mutation {
  addDocument(addDocumentInputGraphql: AddDocumentInputGraphql!): DocumentModelGraphql!
  addRecipe(newRecipeData: NewRecipeInputGraphql!): RecipeModelGraphql!
  createTemplate(templateInputGraphql: TemplateInputGraphql!): TemplateResponseExtendedGraphql!
  createUser(userInputGraphql: UserInputGraphql!): UserModelExtendedGraphql!
  deleteTemplate(templateId: String!): TemplateResponseExtendedGraphql!
  deleteUser(userIdAuth: String!, userIdProfile: String!): UserModelExtendedGraphql!
  removeDocument(id: String!): Boolean!
  removeRecipe(id: String!): Boolean!
  updateTemplate(templateInputGraphql: TemplateInputGraphql!): TemplateResponseExtendedGraphql!
  updateUser(userInputGraphql2: UserInputGraphql!): UserModelExtendedGraphql!
}

input NewRecipeInputGraphql {
  description: String
  ingredients: [String!]!
  title: String!
}

type ProfileModelGraphql {
  """avatarSrc"""
  avatarSize: AvatarSizeGraphgl

  """avatarSrc"""
  avatarSrc: String

  """contacts"""
  contacts: [String!]

  """disclaimer"""
  disclaimer: String

  """emails"""
  emails: [String!]

  """profile ID"""
  idProfile: ID!

  """socket ID"""
  idSocket: ID

  """user ID"""
  idUser: ID!

  """imagePendingSrc"""
  imagePendingSrc: String

  """isActive"""
  isActive: Boolean!

  """locations"""
  locations: [String!]

  """messengers"""
  messengers: [MessengerGraphgl!]

  """nameFirst"""
  nameFirst: String

  """nameLast"""
  nameLast: String

  """pendingText"""
  pendingText: String

  """phones"""
  phones: [String!]

  """default position profile in the list"""
  position: Float

  """profile ID"""
  profileName: String!

  """promptExamples"""
  promptExamples: [String!]

  """serviceSections"""
  serviceSections: [String!]

  """serviceSpecs"""
  serviceSpecs: [String!]

  """summary"""
  summary: String
}

type Query {
  findAllDocuments(skip: Int! = 0, take: Int! = 25): [DocumentModelGraphql!]!
  findDocument(documentID: String!): DocumentModelGraphql!
  getImagesOpenAi(imageOpenAiInput: ImageOpenAiInputGraphql!): ImagesOpenAiModelGraphql!
  getMessageAssistant(messageAssistantInput: MessageAssistantInputGraphql!): MessageAssistantModelGraphql!
  getProfiles: [ProfileModelGraphql!]!
  getRefreshedUserAuthAwsCognito(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputGraphql!): UserIdDataAwsCognitoGraphql!
  getRevokedUserAuthAwsCognito(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputGraphql!): UserIdDataAwsCognitoGraphql!
  getUserIdDataAwsCognito(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputGraphql!): UserIdDataAwsCognitoGraphql!
  readTemplates(options: TemplateOptionsReadGraphql!): [TemplateModelGraphql!]!
  readUserAuth(userIdAuth: String!): UserModelExtendedGraphql!
  readUserProfile(userIdProfile: String!): UserModelExtendedGraphql!
  readUsers(options: ReadUsersOptions!): UsersGraphql!
  recipe(id: String!): RecipeModelGraphql!
  recipes(skip: Int! = 0, take: Int! = 25): [RecipeModelGraphql!]!
  sendEmailDocument(documentID: String!, sendBcc: String!, sendCc: String!, sendTo: String!): DocumentModelGraphql!
}

input ReadUsersOptions {
  """
  user fields equal to, see https://docs.mongodb.com/manual/reference/operator/query/eq/
  """
  eq: [ComparisonFields!]

  """The option to search for active or not recods in user document"""
  isActive: Boolean = true

  """
  user fields equal to, see https://docs.mongodb.com/manual/reference/operator/query/ne/
  """
  ne: [ComparisonFields!]
}

type RecipeModelGraphql {
  creationDate: String!
  description: String
  id: ID!
  ingredients: [String!]!
  title: String!
}

type ResponseMessageGraphql {
  """description message"""
  message: String

  """status: success or failure"""
  status: String
}

type Subscription {
  documentAdded: DocumentModelGraphql!
  recipeAdded: RecipeModelGraphql!
}

input TemplateInputGraphql {
  """template created date"""
  templateDateCreated: Date

  """template closed date"""
  templateDateDeleted: Date

  """template updated date"""
  templateDateUpdated: Date

  """template ID"""
  templateId: ID
}

type TemplateMessageGraphql {
  """description message"""
  message: String

  """status: success or failure"""
  status: String
}

type TemplateModelGraphql {
  """template created date"""
  templateDateCreated: Date

  """template closed date"""
  templateDateDeleted: Date

  """template updated date"""
  templateDateUpdated: Date

  """template ID"""
  templateId: ID
}

input TemplateOptionsReadGraphql {
  """temporary name - value"""
  param: String
}

type TemplateResponseExtendedGraphql {
  responseMessage: TemplateMessageGraphql!

  """template created date"""
  templateDateCreated: Date

  """template closed date"""
  templateDateDeleted: Date

  """template updated date"""
  templateDateUpdated: Date

  """template ID"""
  templateId: ID
}

type UserIdDataAwsCognitoGraphql {
  """at hash"""
  at_hash: String

  """
  The user pool app client that authenticated your user. Amazon Cognito renders the same value in the access token client_id claim
  """
  aud: String

  """
  The authentication time, in Unix time format, that your user completed authentication
  """
  auth_time: Float

  """
  An array of the names of user pool groups that have your user as a member
  """
  cognito_groups: [String!]

  """The username of your user in your user pool"""
  cognito_username: String

  """user's email"""
  email: String

  """is email verified"""
  email_verified: Boolean

  """
  The expiration time, in Unix time format, that your user's token expires
  """
  exp: Float

  """
  The issued-at time, in Unix time format, that Amazon Cognito issued your user's token
  """
  iat: Float

  """
  The identity provider that issued the token. The claim has the following format
  """
  iss: String

  """The unique identifier of the JWT"""
  jti: String

  """message along with data"""
  message: String!

  """
  A token-revocation identifier associated with your user's refresh token. Amazon Cognito references the origin_jti claim when it checks if you revoked your user's token with the Revoke endpoint or the RevokeToken API operation. When you revoke a token, Amazon Cognito invalidates all access and ID tokens with the same origin_jti value
  """
  origin_jti: String

  """preferred username"""
  preferred_username: String

  """AWS refresh token from post-authorization workflow"""
  refresh_token: String

  """
  A unique identifier (UUID), or subject, for the authenticated user. The username might not be unique in your user pool. The sub claim is the best way to identify a given user
  """
  sub: ID

  """The intended purpose of the token. In an ID token, its value is id"""
  token_use: String
}

input UserIdDataAwsCognitoInputGraphql {
  """AWS code from authorisation workflow"""
  code: String

  """AWS redirect_uri"""
  redirect_uri: String

  """AWS refresh token from post-authorization workflow"""
  refresh_token: String
}

input UserInputGraphql {
  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user login source"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user first name"""
  userNameFirst: String

  """user last name"""
  userNameLast: String

  """user middle name"""
  userNameMiddle: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UserModelExtendedGraphql {
  responseMessage: ResponseMessageGraphql!

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user created date"""
  userDateCreated: Date

  """user closed date"""
  userDateDeleted: Date

  """user updated date"""
  userDateUpdated: Date

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user timezone"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user first name"""
  userNameFirst: String

  """user last name"""
  userNameLast: String

  """user middle name"""
  userNameMiddle: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UserModelGraphql {
  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user created date"""
  userDateCreated: Date

  """user closed date"""
  userDateDeleted: Date

  """user updated date"""
  userDateUpdated: Date

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user timezone"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user first name"""
  userNameFirst: String

  """user last name"""
  userNameLast: String

  """user middle name"""
  userNameMiddle: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

input UserNameInputGraphql {
  firstName: String!
  lastName: String!
  middleName: String!
}

type UserNameObjectGraphql {
  firstName: String!
  lastName: String!
  middleName: String!
}

type UsersGraphql {
  responseMessage: ResponseMessageGraphql!
  users: [UserModelGraphql!]!
}
