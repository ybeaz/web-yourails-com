# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AiRequestOptionsType {
  """response_format"""
  response_format: String
}

input AvatarSizeInputType {
  """height"""
  height: Float = 0

  """width"""
  width: Float = 0
}

type AvatarSizeType {
  """height"""
  height: Float

  """width"""
  width: Float
}

type BotType {
  """aiRequestOptions"""
  aiRequestOptions: AiRequestOptionsType!

  """aiServiceMethod"""
  aiServiceMethod: String!

  """aiServiceName"""
  aiServiceName: String!

  """bots ID"""
  botID: ID

  """comments"""
  comments: String!

  """bots created date"""
  dateCreated: Float

  """bots deleted date"""
  dateDeleted: Float

  """bots updated date"""
  dateUpdated: Float

  """disclaimerRef"""
  disclaimerRef: String!

  """isActive"""
  isActive: Boolean

  """profile ID"""
  profileID: ID

  """profileName"""
  profileName: String!

  """prompt"""
  prompt: PromptType!

  """transformFunctionName"""
  transformFunctionName: String!

  """user ID"""
  userID: ID
}

type BotsConnectionType {
  """[BotsEdgeType]"""
  edges: [BotsEdgeType!]

  """BotsPageInfoType"""
  pageInfo: BotsPageInfoType
}

type BotsEdgeType {
  """cursor"""
  cursor: String

  """BotsEdgeType"""
  node: BotType
}

type BotsPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type ChoiceType {
  finish_reason: String!
  index: Int!
  message: MessageChoiceType!
}

type CollectionUpdateStatusType {
  """templates ID"""
  collectionName: ID

  """collection updated date"""
  dateUpdated: Float

  """status > whether the collection is updated successfully"""
  statusUpdated: Boolean!
}

input ComparisonFields {
  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID
}

enum CompetencyContentType {
  CompetencyTagType
  ProfileType
  ProjectType
}

type CompetencyTagType {
  """competency ID"""
  competencyID: ID!

  """contentType"""
  contentType: CompetencyContentType!

  """iconLibrary"""
  iconLibrary: String

  """iconName"""
  iconName: String

  """linkHref"""
  linkHref: String

  """profile ID"""
  profileID: ID!

  """section"""
  section: String

  """title"""
  title: String

  """tooltips"""
  tooltips: String
}

input CompetencyTagsInputType {
  """competencyTags created date"""
  competencyTagsDateCreated: Date

  """competencyTags deleted date"""
  competencyTagsDateDeleted: Date

  """competencyTags updated date"""
  competencyTagsDateUpdated: Date

  """competencyTags ID"""
  idCompetencyTags: ID
}

input CompetencyTagsParamsReadType {
  """first item"""
  profileID: String
}

type CourseEdgeType {
  """cursor"""
  cursor: String

  """Course"""
  node: CourseType
}

type CourseType {
  """course capture"""
  capture: String!

  """courses ID"""
  courseID: ID!

  """courses created date"""
  dateCreated: Float!

  """courses deleted date"""
  dateDeleted: Float

  """courses updated date"""
  dateUpdated: Float!

  """course description"""
  description: String!

  """ipClient profile/ user"""
  ipClient: String

  """isActive"""
  isActive: Boolean!

  """language code"""
  language: String!

  """courses meta information"""
  meta: MetaCourseType

  """courses modules"""
  modules: [ModuleCourseType!]

  """profile ID"""
  profileID: ID!
}

type CoursesConnectionType {
  """[CoursesEdgeType]"""
  edges: [CourseEdgeType!]

  """CoursesPageInfoType"""
  pageInfo: CoursesPageInfoType
}

type CoursesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

input CreateBotResponseInputType {
  """botID"""
  botID: ID

  """profileID"""
  profileID: ID

  """profileName"""
  profileName: String = null

  """userText"""
  userText: String!
}

type CreateBotResponseType {
  """botID"""
  botID: ID

  """isBotResponse"""
  isBotResponse: Boolean

  """length"""
  length: Float

  """profileID"""
  profileID: ID

  """profileName"""
  profileName: String

  """textObj"""
  textObj: TextObjType
}

input CreateBotsInputType {
  """bots ID"""
  botsID: ID
}

type CreateContentMetaDataType {
  """capture"""
  capture: String

  """course module contentID"""
  contentID: ID

  """description"""
  description: String

  """duration"""
  duration: String

  """isContentMetaData"""
  isContentMetaData: Boolean

  """language code"""
  language: String

  """length"""
  length: Float

  """courses meta tags: tags that characterises the course content"""
  tags: [String!]

  """thumbnail image data"""
  thumbnails: ThumbnailsBotType!
}

input CreateCourseInputType {
  """course capture"""
  capture: String!

  """courses ID"""
  courseID: ID

  """course description"""
  description: String!

  """isActive"""
  isActive: Boolean! = false

  """language code"""
  language: String!

  """courses meta information"""
  meta: MetaCourseInputType

  """courses modules"""
  modules: [ModuleCourseInputType!]

  """profile ID"""
  profileID: ID!
}

input CreateDocumentInputType {
  """creator of the module"""
  creator: UpdateProfileInputType!

  """ipClient profile/ user"""
  ipClient: String = null

  """isActive"""
  isActive: Boolean! = false

  """learner, user, student"""
  learner: UpdateProfileInputType!

  """module"""
  module: UpdateModuleInputType!
}

input CreateModuleInputType {
  """capture"""
  capture: String!

  """module contentID"""
  contentID: ID!

  """module content type"""
  contentType: String!

  """creatorID"""
  creatorID: ID!

  """description"""
  description: String!

  """module duration"""
  duration: String!

  """module index"""
  index: Int

  """ipClient profile/ user"""
  ipClient: String = null

  """isActive"""
  isActive: Boolean! = false

  """language code"""
  language: String!

  """module objection"""
  objections: [ObjectionInputType!] = []

  """organizationID"""
  organizationID: ID!

  """module passRate"""
  passRate: Float = 0.75

  """module questionNumber"""
  questionNumber: Int! = 4

  """module questions"""
  questions: [QuestionInputType!]! = []

  """meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """module summary"""
  summary: [SummaryItemInputType!] = []

  """meta tags: tags that characterises the content"""
  tags: [String!] = []

  """thumbnail image data"""
  thumbnails: ThumbnailsInputType = null

  """module transcriptList"""
  transcriptList: [TranscriptObjectInputType!] = []
}

input CreateOriginInputType {
  """youtubeID"""
  originID: String = null

  """youtubeUrl"""
  originUrl: [String!] = null
}

input CreateProfileInputType {
  """
  affiliation. An organization that this person is affiliated with. For example, a school/university, a club, or a team.
  """
  affiliation: String

  """avatarSrc"""
  avatarSize: AvatarSizeInputType

  """avatarSrc"""
  avatarSrc: String

  """award. An award won by or for this item. Supersedes awards."""
  awards: [String!]

  """user ID"""
  botID: ID = null

  """contacts"""
  contacts: [String!] = []

  """description"""
  description: String

  """disclaimer"""
  disclaimer: String

  """emails"""
  emails: [String!] = []

  """help"""
  help: String

  """socket ID"""
  idSocket: ID

  """imagePendingSrc"""
  imagePendingSrc: String

  """isActive"""
  isActive: Boolean! = false

  """
  jobTitle. The job title of the person (for example, Financial Manager).
  """
  jobTitle: String

  """locations"""
  locations: [String!] = []

  """messengers"""
  messengers: [MessengerInputType!] = []

  """nameFirst"""
  nameFirst: String

  """nameLast"""
  nameLast: String

  """nameMiddle"""
  nameMiddle: String

  """pendingText"""
  pendingText: String

  """phones"""
  phones: [String!] = []

  """default position profile in the list"""
  position: Float = 0

  """profile ID"""
  profileName: String!

  """profileNature"""
  profileNature: ProfileNatureType!

  """promptExamples"""
  promptExamples: [String!] = []

  """serviceSections"""
  serviceSections: [String!] = []

  """serviceSpecs"""
  serviceSpecs: [String!] = []

  """url. URLs of the item."""
  urls: [String!]

  """user ID"""
  userID: ID!
}

input CreateTemplatesInputType {
  """templates ID"""
  templatesID: ID
}

type CreateYoutubeTranscriptType {
  """isTranscript"""
  isTranscript: Boolean

  """length"""
  length: Float

  """transcript"""
  transcript: String

  """transcriptList"""
  transcriptList: [TranscriptObjectBotType!]
}

"""Date custom scalar type"""
scalar Date

type DocumentEdgeType {
  """cursor"""
  cursor: String

  """Document"""
  node: DocumentType
}

type DocumentType {
  """creator of the module"""
  creator: ProfileType!

  """documents created date"""
  dateCreated: Float!

  """documents deleted date"""
  dateDeleted: Float

  """documents updated date"""
  dateUpdated: Float!

  """documentID"""
  documentID: ID!

  """ipClient profile/ user"""
  ipClient: String

  """isActive"""
  isActive: Boolean!

  """learner, user, student"""
  learner: ProfileType!

  """module"""
  module: ModuleType!
}

type DocumentsConnectionType {
  """[DocumentsEdgeType]"""
  edges: [DocumentEdgeType!]

  """DocumentsPageInfoType"""
  pageInfo: DocumentsPageInfoType
}

type DocumentsPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type ImageDataOpenAiType {
  b64_json: String
  url: String
}

input ImageOpenAiInputType {
  n: Int!
  prompt: String!
  response_format: String
  size: String!
}

type ImagesOpenAiType {
  created: Int!
  data: [ImageDataOpenAiType!]!
}

input MessageAssistantInputType {
  messages: [MessageChoiceInputType!]!
  model: String!
  temperature: Float!
}

type MessageAssistantType {
  choices: [ChoiceType!]!
}

input MessageChoiceInputType {
  content: String
  role: String!
}

type MessageChoiceType {
  content: String
  role: String!
}

input MessengerInputType {
  """name"""
  name: String

  """profileName"""
  profileName: String
}

type MessengerType {
  """name"""
  name: String

  """profileName"""
  profileName: String
}

input MetaCourseInputType {
  """course meta email"""
  email: String!

  """course meta institution"""
  institution: String!

  """course meta isSendingBcc"""
  isSendingBcc: Boolean! = false

  """course meta specName"""
  specName: String!

  """course meta specTitle"""
  specTitle: String!

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """
  courses meta tags: tags that characterises the course content, its marketing features
  """
  tags: [String!] = []
}

input MetaCoursePartialInputType {
  """course meta email"""
  email: String

  """course meta institution"""
  institution: String

  """course meta isSendingBcc"""
  isSendingBcc: Boolean

  """course meta specName"""
  specName: String

  """course meta specTitle"""
  specTitle: String

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """
  courses meta tags: tags that characterises the course content, its marketing features
  """
  tags: [String!] = []
}

type MetaCoursePartialType {
  """course meta email"""
  email: String

  """course meta institution"""
  institution: String

  """course meta isSendingBcc"""
  isSendingBcc: Boolean

  """course meta specName"""
  specName: String

  """course meta specTitle"""
  specTitle: String

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!]

  """
  courses meta tags: tags that characterises the course content, its marketing features
  """
  tags: [String!]
}

type MetaCourseType {
  """course meta email"""
  email: String!

  """course meta institution"""
  institution: String!

  """course meta isSendingBcc"""
  isSendingBcc: Boolean!

  """course meta specName"""
  specName: String!

  """course meta specTitle"""
  specTitle: String!

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!]

  """courses meta tags: tags that characterises the course content"""
  tags: [String!]
}

input MetaPartialInputType {
  """meta email"""
  email: String

  """meta institution"""
  institution: String

  """meta isSendingBcc"""
  isSendingBcc: Boolean

  """meta specName"""
  specName: String

  """meta specTitle"""
  specTitle: String

  """meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """meta tags: tags that characterises the content, its marketing features"""
  tags: [String!] = []
}

type MetaPartialType {
  """meta email"""
  email: String

  """meta institution"""
  institution: String

  """meta isSendingBcc"""
  isSendingBcc: Boolean

  """meta specName"""
  specName: String

  """meta specTitle"""
  specTitle: String

  """meta stages: stages/ statuses/ envs"""
  stages: [String!]

  """meta tags: tags that characterises the content, its marketing features"""
  tags: [String!]
}

input ModuleCourseInputType {
  """course module capture"""
  capture: String!

  """course module contentID"""
  contentID: ID!

  """course module content type"""
  contentType: String!

  """course module capture"""
  description: String

  """course module duration"""
  duration: String!

  """course module index"""
  index: Int!

  """isActive"""
  isActive: Boolean! = false

  """course module ID"""
  moduleID: ID

  """course module objection"""
  objections: [ObjectionCourseInputType!]

  """module passRate"""
  passRate: Float

  """module questionNumber"""
  questionNumber: Int!

  """course module questions"""
  questions: [QuestionCourseInputType!]!

  """course module summary"""
  summary: [SummaryItemCourseInputType!]

  """thumbnail image data"""
  thumbnails: ThumbnailsCourseInputType = null
}

type ModuleCourseType {
  """course module capture"""
  capture: String!

  """course module contentID"""
  contentID: ID!

  """course module content type"""
  contentType: String!

  """course module capture"""
  description: String

  """course module duration"""
  duration: String!

  """course module index"""
  index: Int!

  """isActive"""
  isActive: Boolean!

  """course module ID"""
  moduleID: ID!

  """course module objection"""
  objections: [ObjectionCourseType!]

  """module passRate"""
  passRate: Float

  """module questionNumber"""
  questionNumber: Int!

  """course module questions"""
  questions: [QuestionCourseType!]!

  """course module summary"""
  summary: [SummaryItemCourseType!]

  """thumbnail image data"""
  thumbnails: ThumbnailsCourseType
}

type ModuleEdgeType {
  """cursor"""
  cursor: String

  """module"""
  node: ModuleType
}

type ModuleType {
  """capture"""
  capture: String!

  """module contentID"""
  contentID: ID!

  """module content type"""
  contentType: String!

  """creatorID"""
  creatorID: ID!

  """created date"""
  dateCreated: Float!

  """deleted date"""
  dateDeleted: Float

  """updated date"""
  dateUpdated: Float!

  """description"""
  description: String!

  """module duration"""
  duration: String!

  """module index"""
  index: Int

  """ipClient profile/ user"""
  ipClient: String

  """isActive"""
  isActive: Boolean!

  """language code"""
  language: String!

  """module ID"""
  moduleID: ID!

  """module objection"""
  objections: [ObjectionType!]

  """organizationID"""
  organizationID: ID!

  """module passRate"""
  passRate: Float

  """module questionNumber"""
  questionNumber: Int!

  """module questions"""
  questions: [QuestionType!]!

  """meta stages: stages/ statuses/ envs"""
  stages: [String!]

  """module summary"""
  summary: [SummaryItemType!]

  """meta tags: tags that characterises the content"""
  tags: [String!]

  """thumbnail image data"""
  thumbnails: ThumbnailsType

  """transcriptList"""
  transcriptList: [TranscriptObjectType!]
}

type ModulesConnectionType {
  """[ModuleEdgeType]"""
  edges: [ModuleEdgeType!]

  """ModulesPageInfoType"""
  pageInfo: ModulesPageInfoType
}

type ModulesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type Mutation {
  addRecipe(newRecipeData: NewRecipeInputType!): RecipeType!
  createBotResponse(createBotResponseInput: CreateBotResponseInputType!): CreateBotResponseType!
  createBots(createBotsInput: [CreateBotsInputType!]!): [BotType!]!
  createCompetencyTags(competencyTagsInput: CompetencyTagsInputType!): [CompetencyTagType!]!
  createContentMetaData(createContentMetaDataInput: CreateOriginInputType!): CreateContentMetaDataType!
  createCourses(createCoursesInput: [CreateCourseInputType!]!): [CourseType!]!
  createDocuments(createDocumentsInput: [CreateDocumentInputType!]!): [DocumentType!]!
  createModules(createModulesInput: [CreateModuleInputType!]!): [ModuleType!]!
  createProfiles(createProfilesInput: [CreateProfileInputType!]!): [ProfileType!]!
  createSiteMap: SiteMapReportType!
  createTemplates(createTemplatesInput: [CreateTemplatesInputType!]!): [TemplatesType!]!
  createUser(userInputType: UserInputType!): UserModelExtendedType!
  createYoutubeTranscript(createYoutubeTranscriptInput: CreateOriginInputType!): CreateYoutubeTranscriptType!
  deactivateBots(deactivateBotsIdsInput: [String!]!): [String!]!
  deactivateCourses(deactivateCoursesIdsInput: [String!]!): [String!]!
  deactivateDocuments(deactivateDocumentsIdsInput: [String!]!): [String!]!
  deactivateModules(deactivateModulesIdsInput: [String!]!): [String!]!
  deactivateProfiles(deactivateProfilesIdsInput: [String!]!): [String!]!
  deactivateTemplates(deactivateTemplatesIdsInput: [String!]!): [String!]!
  deleteBots(deleteBotsIdsInput: [String!]!): [String!]!
  deleteCompetencyTags(idCompetencyTags: String!): [CompetencyTagType!]!
  deleteCourses(deleteCoursesIdsInput: [String!]!): [String!]!
  deleteDocuments(deleteDocumentsIdsInput: [String!]!): [String!]!
  deleteModules(deleteModulesIdsInput: [String!]!): [String!]!
  deleteProfiles(deleteProfilesIdsInput: [String!]!): [String!]!
  deleteTemplates(deleteTemplatesIdsInput: [String!]!): [String!]!
  deleteUser(userIdAuth: String!, userIdProfile: String!): UserModelExtendedType!
  removeRecipe(id: String!): Boolean!
  updateBots(updateBotsInput: [UpdateBotsInputType!]!): [BotType!]!
  updateCollections(collections: [String!]!): [CollectionUpdateStatusType!]!
  updateCompetencyTags(competencyTagsInput: CompetencyTagsInputType!): [CompetencyTagType!]!
  updateCourses(updateCoursesInput: [UpdateCourseInputType!]!): [CourseType!]!
  updateCoursesMeta(updateCoursesMetaInput: [UpdateCourseMetaInputType!]!): [UpdateCourseMetaType!]!
  updateDocuments(updateDocumentsInput: [UpdateDocumentInputType!]!): [DocumentType!]!
  updateModules(updateModulesInput: [UpdateModuleInputType!]!): [ModuleType!]!
  updateModulesMeta(updateModulesMetaInput: [UpdateMetaInputType!]!): [UpdateMetaType!]!
  updateProfiles(updateProfilesInput: [UpdateProfileInputType!]!): [ProfileType!]!
  updateTemplates(updateTemplatesInput: [UpdateTemplatesInputType!]!): [TemplatesType!]!
  updateUser(userInputType2: UserInputType!): UserModelExtendedType!
}

input NewRecipeInputType {
  description: String
  ingredients: [String!]!
  title: String!
}

input ObjectionCourseInputType {
  """course module Objection capture"""
  capture: String = null

  """courses module Objection ID"""
  objectionID: ID

  """course module Objection text"""
  text: String = null
}

type ObjectionCourseType {
  """course module Objection capture"""
  capture: String

  """course module Objection ID"""
  objectionID: ID!

  """course module Objection text"""
  text: String
}

input ObjectionInputType {
  """module Objection capture"""
  capture: String = null

  """module Objection ID"""
  objectionID: ID

  """module Objection text"""
  text: String = null
}

type ObjectionType {
  """module Objection capture"""
  capture: String

  """module Objection ID"""
  objectionID: ID!

  """module Objection text"""
  text: String
}

input OptionCourseInputType {
  """course module question option label"""
  label: String!

  """courses module question option ID"""
  optionID: ID

  """course module question option status: true or false"""
  status: Boolean!
}

type OptionCourseType {
  """course module question option label"""
  label: String!

  """courses module question option ID"""
  optionID: ID

  """course module question option status: true or false"""
  status: Boolean!
}

input OptionInputType {
  """module question option answer: true or false"""
  answer: Boolean

  """module question option label"""
  label: String!

  """module question option ID"""
  optionID: ID

  """module question option status: true or false"""
  status: Boolean!
}

type OptionType {
  """module question option answer: true or false"""
  answer: Boolean

  """module question option label"""
  label: String!

  """module question option ID"""
  optionID: ID

  """module question option status: true or false"""
  status: Boolean!
}

type ProfileEdgeType {
  """cursor"""
  cursor: String

  """ProfileEdgeType"""
  node: ProfileType
}

enum ProfileNatureType {
  bot
  company
  human
}

type ProfileType {
  """
  affiliation. An organization that this person is affiliated with. For example, a school/university, a club, or a team.
  """
  affiliation: String

  """avatarSrc"""
  avatarSize: AvatarSizeType

  """avatarSrc"""
  avatarSrc: String

  """award. An award won by or for this item. Supersedes awards."""
  awards: [String!]

  """user ID"""
  botID: ID

  """contacts"""
  contacts: [String!]

  """created date"""
  dateCreated: Float!

  """deleted date"""
  dateDeleted: Float

  """updated date"""
  dateUpdated: Float!

  """description"""
  description: String

  """disclaimer"""
  disclaimer: String

  """emails"""
  emails: [String!]

  """help"""
  help: String

  """socket ID"""
  idSocket: ID

  """imagePendingSrc"""
  imagePendingSrc: String

  """ipClient profile/ user"""
  ipClient: String

  """isActive"""
  isActive: Boolean!

  """
  jobTitle. The job title of the person (for example, Financial Manager).
  """
  jobTitle: String

  """locations"""
  locations: [String!]

  """messengers"""
  messengers: [MessengerType!]

  """nameFirst"""
  nameFirst: String

  """nameLast"""
  nameLast: String

  """nameMiddle"""
  nameMiddle: String

  """pendingText"""
  pendingText: String

  """phones"""
  phones: [String!]

  """default position profile in the list"""
  position: Float

  """profile ID"""
  profileID: ID!

  """profile ID"""
  profileName: String!

  """profileNature"""
  profileNature: ProfileNatureType!

  """promptExamples"""
  promptExamples: [String!]

  """serviceSections"""
  serviceSections: [String!]

  """serviceSpecs"""
  serviceSpecs: [String!]

  """url. URLs of the item."""
  urls: [String!]

  """user ID"""
  userID: ID!
}

type ProfilesConnectionType {
  """[ProfileEdgeType]"""
  edges: [ProfileEdgeType!]

  """ProfilesPageInfoType"""
  pageInfo: ProfilesPageInfoType
}

type ProfilesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type PromptMessageType {
  """content"""
  content: String!

  """role"""
  role: String!
}

type PromptType {
  """messages"""
  messages: [PromptMessageType!]!

  """model"""
  model: String

  """n for images"""
  n: Int

  """prompt for images"""
  prompt: String

  """response_format for images"""
  response_format: String

  """size for images"""
  size: String

  """temperature"""
  temperature: Float!
}

type Query {
  countBots: Int!
  countCourses: Int!
  countDocuments: Int!
  countModules: Int!
  countProfiles: Int!
  countTemplates: Int!
  getAuthAwsCognitoUserData(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputType!): UserIdDataAwsCognitoType!
  getAuthAwsCognitoUserRefreshed(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputType!): UserIdDataAwsCognitoType!
  getAuthAwsCognitoUserRevoked(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputType!): UserIdDataAwsCognitoType!
  getImagesOpenAi(imageOpenAiInput: ImageOpenAiInputType!): ImagesOpenAiType!
  getMessageAssistant(messageAssistantInput: MessageAssistantInputType!): MessageAssistantType!
  readBots(readBotsInput: [String!]!): [BotType!]!
  readBotsAll: [BotType!]!
  readBotsConnection(readBotsConnectionInput: ReadBotsConnectionInputType!): BotsConnectionType!
  readCompetencyTags(params: CompetencyTagsParamsReadType!): [CompetencyTagType!]!
  readCourses(readCoursesInput: [ReadCourseInputType!]!): [CourseType!]!
  readCoursesAll: [CourseType!]!
  readCoursesConnection(readCoursesConnectionInput: ReadCoursesConnectionInputType!): CoursesConnectionType!
  readDocuments(readDocumentsIdsInput: [String!]!): [DocumentType!]!
  readDocumentsAll: [DocumentType!]!
  readDocumentsConnection(readDocumentsConnectionInput: ReadDocumentsConnectionInputType!): DocumentsConnectionType!
  readModules(readModulesInput: [ReadModuleInputType!]!): [ModuleType!]!
  readModulesAll: [ModuleType!]!
  readModulesConnection(readModulesConnectionInput: ReadModulesConnectionInputType!): ModulesConnectionType!
  readProfiles(readProfilesInput: [ReadProfileInputType!]!): [ProfileType!]!
  readProfilesAll: [ProfileType!]!
  readProfilesConnection(readProfilesConnectionInput: ReadProfilesConnectionInputType!): ProfilesConnectionType!
  readRecipe(id: String!): RecipeType!
  readRecipes(skip: Int! = 0, take: Int! = 25): [RecipeType!]!
  readTemplates(readTemplatesInput: [String!]!): [TemplatesType!]!
  readTemplatesAll: [TemplatesType!]!
  readTemplatesConnection(readTemplatesConnectionInput: ReadTemplatesConnectionInputType!): TemplatesConnectionType!
  readUserAuth(userIdAuth: String!): UserModelExtendedType!
  readUserProfile(userIdProfile: String!): UserModelExtendedType!
  readUsers(options: ReadUsersOptions!): UsersType!
  sendEmailDocument(documentID: String!, sendBcc: String!, sendCc: String!, sendTo: String!): DocumentType!
}

input QuestionCourseInputType {
  """course module question capture"""
  capture: String!

  """course module question designType"""
  designType: String

  """course module question isActive"""
  isActive: Boolean! = false

  """designType > multi"""
  multi: Boolean = false

  """course module question options"""
  options: [OptionCourseInputType!]!

  """courses module question ID"""
  questionID: ID

  """course module question topic"""
  topic: String
}

type QuestionCourseType {
  """course module question capture"""
  capture: String!

  """course module question designType"""
  designType: String

  """course module question isActive"""
  isActive: Boolean!

  """designType > multi"""
  multi: Boolean

  """course module question options"""
  options: [OptionCourseType!]!

  """courses module question ID"""
  questionID: ID

  """course module question topic"""
  topic: String
}

input QuestionInputType {
  """module question capture"""
  capture: String!

  """module question designType"""
  designType: String

  """module question isActive"""
  isActive: Boolean! = false

  """designType > multi"""
  multi: Boolean = false

  """module question options"""
  options: [OptionInputType!]!

  """module question ID"""
  questionID: ID

  """module question topic"""
  topic: String
}

type QuestionType {
  """module question capture"""
  capture: String!

  """module question designType"""
  designType: String

  """module question isActive"""
  isActive: Boolean!

  """designType > multi"""
  multi: Boolean

  """module question options"""
  options: [OptionType!]!

  """module question ID"""
  questionID: ID

  """module question topic"""
  topic: String
}

input ReadBotsConnectionInputType {
  """after"""
  after: String

  """first"""
  first: Int

  """offset"""
  offset: Int
}

input ReadCourseInputType {
  """course ID"""
  courseID: ID

  """module ID"""
  moduleID: ID
}

input ReadCoursesConnectionInputType {
  """
  after: Specifies a cursor that indicates the starting point for the next set of data to retrieve.
  """
  after: String

  """course module contentIDs"""
  contentIDs: [ID!] = []

  """courses ID"""
  courseIDs: [ID!] = []

  """
  first: Specifies the number of items to return from the beginning of the dataset.
  """
  first: Int

  """isActive"""
  isActive: Boolean

  """language code"""
  language: String = null

  """course module IDs"""
  moduleIDs: [ID!] = []

  """
  offset: Similar to "First," it specifies the maximum number of items to return. if offset === 0 then the function returns ALL docs after the first number
  """
  offset: Int

  """profile IDs"""
  profileIDs: [ID!] = []

  """searchPhrase"""
  searchPhrase: String = null

  """option to sort by a field: 1 ascending, -1 descending"""
  sort: SortCoursesInputType

  """
  courses meta stages: stages/ statuses/ envs to omit with that selection of the documents
  """
  stagesOmit: [String!] = []

  """
  courses meta stages: stages/ statuses/ envs to pick from the set of documents
  """
  stagesPick: [String!] = []

  """
  courses meta tags: tags that characterises the course content to omit with that selection of the documents
  """
  tagsOmit: [String!] = []

  """
  courses meta tags: tags that characterises the course content to pick from the set of documents
  """
  tagsPick: [String!] = []
}

input ReadDocumentsConnectionInputType {
  """
  after: Specifies a cursor that indicates the starting point for the next set of data to retrieve.
  """
  after: String

  """course module contentIDs"""
  contentIDs: [ID!] = []

  """courses ID"""
  courseIDs: [ID!] = []

  """creator IDs"""
  creatorIDs: [ID!] = []

  """
  first: Specifies the number of items to return from the beginning of the dataset.
  """
  first: Int

  """isActive"""
  isActive: Boolean

  """language code"""
  language: String = null

  """learner IDs"""
  learnerIDs: [ID!] = []

  """course module IDs"""
  moduleIDs: [ID!] = []

  """
  offset: Similar to "First," it specifies the maximum number of items to return. if offset === 0 then the function returns ALL docs after the first number
  """
  offset: Int

  """searchPhrase"""
  searchPhrase: String = null

  """option to sort by a field: 1 ascending, -1 descending"""
  sort: SortDocumentsInputType

  """
  documents meta stages: stages/ statuses/ envs to omit with that selection of the documents
  """
  stagesOmit: [String!] = []

  """
  documents meta stages: stages/ statuses/ envs to pick from the set of documents
  """
  stagesPick: [String!] = []

  """
  documents meta tags: tags that characterises the course content to omit with that selection of the documents
  """
  tagsOmit: [String!] = []

  """
  documents meta tags: tags that characterises the course content to pick from the set of documents
  """
  tagsPick: [String!] = []
}

input ReadModuleInputType {
  """module ID"""
  moduleID: ID
}

input ReadModulesConnectionInputType {
  """
  after: Specifies a cursor that indicates the starting point for the next set of data to retrieve.
  """
  after: String

  """module contentIDs"""
  contentIDs: [ID!] = []

  """creator IDs"""
  creatorIDs: [ID!] = []

  """
  first: Specifies the number of items to return from the beginning of the dataset.
  """
  first: Int

  """isActive"""
  isActive: Boolean

  """language code"""
  language: String = null

  """module IDs"""
  moduleIDs: [ID!] = []

  """
  offset: Similar to "First," it specifies the maximum number of items to return. if offset === 0 then the function returns ALL docs after the first number
  """
  offset: Int

  """searchPhrase"""
  searchPhrase: String = null

  """option to sort by a field: 1 ascending, -1 descending"""
  sort: SortModulesInputType

  """
  stages: stages/ statuses/ envs to omit with that selection of the documents
  """
  stagesOmit: [String!] = []

  """stages: stages/ statuses/ envs to pick from the set of documents"""
  stagesPick: [String!] = []

  """
  tags: tags that characterises the content to omit with that selection of the documents
  """
  tagsOmit: [String!] = []

  """
  tags: tags that characterises the content to pick from the set of documents
  """
  tagsPick: [String!] = []
}

input ReadProfileInputType {
  """profile ID"""
  profileID: ID

  """user ID"""
  userID: ID
}

input ReadProfilesConnectionInputType {
  """after"""
  after: String

  """bot IDs"""
  botIDs: [ID!] = []

  """emails"""
  email: String = null

  """first"""
  first: Int

  """isActive"""
  isActive: Boolean

  """offset"""
  offset: Int

  """profile IDs"""
  profileIDs: [ID!] = []

  """searchPhrase"""
  searchPhrase: String = null

  """option to sort by a field: 1 ascending, -1 descending"""
  sort: SortProfilesInputType

  """
  stages: stages/ statuses/ envs to omit with that selection of the documents
  """
  stagesOmit: [String!] = []

  """stages: stages/ statuses/ envs to pick from the set of documents"""
  stagesPick: [String!] = []

  """user IDs"""
  userIDs: [ID!] = []
}

input ReadTemplatesConnectionInputType {
  """after"""
  after: String

  """first"""
  first: Int

  """offset"""
  offset: Int
}

input ReadUsersOptions {
  """
  user fields equal to, see https://docs.mongodb.com/manual/reference/operator/query/eq/
  """
  eq: [ComparisonFields!]

  """The option to search for active or not recods in user document"""
  isActive: Boolean = true

  """
  user fields equal to, see https://docs.mongodb.com/manual/reference/operator/query/ne/
  """
  ne: [ComparisonFields!]
}

type RecipeType {
  creationDate: String!
  description: String
  id: ID!
  ingredients: [String!]!
  title: String!
}

type ResponseMessageType {
  """description message"""
  message: String

  """status: success or failure"""
  status: String
}

type SiteMapReportType {
  """articlesUrls"""
  articlesUrls: Int

  """rootUrl"""
  collectionsUrls: Int

  """modulesUrls"""
  modulesUrls: Int
}

input SortCoursesInputType {
  """sorting direction: 1 ascending, -1 descending"""
  direction: Float

  """property name to sort by"""
  prop: String
}

input SortDocumentsInputType {
  """sorting direction: 1 ascending, -1 descending"""
  direction: Float

  """property name to sort by"""
  prop: String
}

input SortModulesInputType {
  """sorting direction: 1 ascending, -1 descending"""
  direction: Float

  """property name to sort by"""
  prop: String
}

input SortProfilesInputType {
  """sorting direction: 1 ascending, -1 descending"""
  direction: Float

  """property name to sort by"""
  prop: String
}

type Subscription {
  documentAdded: DocumentType!
  recipeAdded: RecipeType!
}

input SummaryItemCourseInputType {
  """course module Summary item capture"""
  capture: String = null

  """courses module Summary item ID"""
  summaryItemID: ID

  """course module Summary item text"""
  text: String = null
}

type SummaryItemCourseType {
  """course module Summary item capture"""
  capture: String

  """course module summary ID"""
  summaryItemID: ID!

  """course module Summary item text"""
  text: String
}

input SummaryItemInputType {
  """module Summary item capture"""
  capture: String = null

  """module Summary item ID"""
  summaryItemID: ID

  """module Summary item text"""
  text: String = null
}

type SummaryItemType {
  """module Summary item capture"""
  capture: String

  """module summary ID"""
  summaryItemID: ID!

  """module Summary item text"""
  text: String
}

type TemplatesConnectionType {
  """[TemplatesEdgeType]"""
  edges: [TemplatesEdgeType!]

  """TemplatesPageInfoType"""
  pageInfo: TemplatesPageInfoType
}

type TemplatesEdgeType {
  """cursor"""
  cursor: String

  """TemplatesEdgeType"""
  node: TemplatesType
}

type TemplatesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type TemplatesType {
  """templates created date"""
  dateCreated: Float!

  """templates deleted date"""
  dateDeleted: Float

  """templates updated date"""
  dateUpdated: Float!

  """isActive"""
  isActive: Boolean!

  """templates ID"""
  templatesID: ID
}

type TextObjType {
  """contentArray"""
  contentArray: [String!]!

  """contentType"""
  contentType: String
}

type ThumbnailsBotType {
  """thumbnail image default"""
  default: ThumbnailsImageDataBotType

  """thumbnail image high"""
  high: ThumbnailsImageDataBotType

  """thumbnail image maxres"""
  maxres: ThumbnailsImageDataBotType

  """thumbnail image medium"""
  medium: ThumbnailsImageDataBotType

  """thumbnail image standard"""
  standard: ThumbnailsImageDataBotType
}

input ThumbnailsCourseImageDataInputType {
  """height"""
  height: Int!

  """url"""
  url: String = null

  """width"""
  width: Int!
}

type ThumbnailsCourseImageDataType {
  """height"""
  height: Int!

  """url"""
  url: String

  """width"""
  width: Int!
}

input ThumbnailsCourseInputType {
  """thumbnail image default"""
  default: ThumbnailsCourseImageDataInputType = null

  """thumbnail image high"""
  high: ThumbnailsCourseImageDataInputType = null

  """thumbnail image maxres"""
  maxres: ThumbnailsCourseImageDataInputType = null

  """thumbnail image medium"""
  medium: ThumbnailsCourseImageDataInputType = null

  """thumbnail image standard"""
  standard: ThumbnailsCourseImageDataInputType = null
}

type ThumbnailsCourseType {
  """thumbnail image default"""
  default: ThumbnailsCourseImageDataType

  """thumbnail image high"""
  high: ThumbnailsCourseImageDataType

  """thumbnail image maxres"""
  maxres: ThumbnailsCourseImageDataType

  """thumbnail image medium"""
  medium: ThumbnailsCourseImageDataType

  """thumbnail image standard"""
  standard: ThumbnailsCourseImageDataType
}

type ThumbnailsImageDataBotType {
  """height"""
  height: Int!

  """url"""
  url: String

  """width"""
  width: Int!
}

input ThumbnailsImageDataInputType {
  """height"""
  height: Int!

  """rel"""
  rel: String = null

  """type"""
  type: String = null

  """url"""
  url: String = null

  """width"""
  width: Int!
}

type ThumbnailsImageDataType {
  """height"""
  height: Int!

  """rel"""
  rel: String

  """type"""
  type: String

  """url"""
  url: String

  """width"""
  width: Int!
}

input ThumbnailsInputType {
  """thumbnail image default"""
  default: ThumbnailsImageDataInputType = null

  """favicon"""
  favicon: ThumbnailsImageDataInputType = null

  """thumbnail image high"""
  high: ThumbnailsImageDataInputType = null

  """image16x16"""
  image16x16: ThumbnailsImageDataInputType = null

  """image32x32"""
  image32x32: ThumbnailsImageDataInputType = null

  """image192x192"""
  image192x192: ThumbnailsImageDataInputType = null

  """image512x512"""
  image512x512: ThumbnailsImageDataInputType = null

  """thumbnail image maxres"""
  maxres: ThumbnailsImageDataInputType = null

  """thumbnail image medium"""
  medium: ThumbnailsImageDataInputType = null

  """thumbnail image standard"""
  standard: ThumbnailsImageDataInputType = null
}

type ThumbnailsType {
  """thumbnail image default"""
  default: ThumbnailsImageDataType

  """favicon"""
  favicon: ThumbnailsImageDataType

  """thumbnail image high"""
  high: ThumbnailsImageDataType

  """image16x16"""
  image16x16: ThumbnailsImageDataType

  """image32x32"""
  image32x32: ThumbnailsImageDataType

  """image192x192"""
  image192x192: ThumbnailsImageDataType

  """image512x512"""
  image512x512: ThumbnailsImageDataType

  """thumbnail image maxres"""
  maxres: ThumbnailsImageDataType

  """thumbnail image medium"""
  medium: ThumbnailsImageDataType

  """thumbnail image standard"""
  standard: ThumbnailsImageDataType
}

type TranscriptObjectBotType {
  """duration"""
  duration: Float

  """start"""
  start: Float

  """text"""
  text: String
}

input TranscriptObjectInputType {
  """duration"""
  duration: Float = 0

  """start"""
  start: Float = 0

  """text"""
  text: String = null

  """transcriptItem ID"""
  transcriptItemID: ID
}

type TranscriptObjectType {
  """duration"""
  duration: Float

  """start"""
  start: Float

  """text"""
  text: String

  """transcriptItem ID"""
  transcriptItemID: ID
}

input UpdateBotsInputType {
  """bots ID"""
  botsID: ID

  """bots created date"""
  dateCreated: Float!

  """bots deleted date"""
  dateDeleted: Float = null

  """bots updated date"""
  dateUpdated: Float!
}

input UpdateCourseInputType {
  """course capture"""
  capture: String!

  """courses ID"""
  courseID: ID!

  """courses created date"""
  dateCreated: Float!

  """courses deleted date"""
  dateDeleted: Float

  """courses updated date"""
  dateUpdated: Float!

  """course description"""
  description: String!

  """isActive"""
  isActive: Boolean! = false

  """language code"""
  language: String!

  """courses meta information"""
  meta: MetaCourseInputType

  """courses modules"""
  modules: [ModuleCourseInputType!]

  """profile ID"""
  profileID: ID!
}

input UpdateCourseMetaInputType {
  """courses ID"""
  courseID: ID

  """courses meta information"""
  meta: MetaCoursePartialInputType

  """module ID"""
  moduleID: ID

  """profile ID"""
  profileID: ID!
}

type UpdateCourseMetaType {
  """courses ID"""
  courseID: ID

  """courses meta information"""
  meta: MetaCoursePartialType

  """module ID"""
  moduleID: ID

  """profile ID"""
  profileID: ID!

  """updateInfo"""
  updateInfo: UpdateInfoCourseType
}

input UpdateDocumentInputType {
  """creator of the module"""
  creator: UpdateProfileInputType!

  """documents created date"""
  dateCreated: Float!

  """documents deleted date"""
  dateDeleted: Float = null

  """documents updated date"""
  dateUpdated: Float!

  """documentID"""
  documentID: ID!

  """ipClient profile/ user"""
  ipClient: String = null

  """isActive"""
  isActive: Boolean! = false

  """learner, user, student"""
  learner: UpdateProfileInputType!

  """module"""
  module: UpdateModuleInputType!
}

type UpdateInfoCourseType {
  """acknowledged"""
  acknowledged: Boolean

  """matchedCount"""
  matchedCount: Int

  """modifiedCount"""
  modifiedCount: Int

  """upsertedCount"""
  upsertedCount: Int

  """upsertedId"""
  upsertedId: String
}

type UpdateInfoType {
  """acknowledged"""
  acknowledged: Boolean

  """matchedCount"""
  matchedCount: Int

  """modifiedCount"""
  modifiedCount: Int

  """upsertedCount"""
  upsertedCount: Int

  """upsertedId"""
  upsertedId: String
}

input UpdateMetaInputType {
  """creatorID"""
  creatorID: ID!

  """meta information"""
  meta: MetaPartialInputType

  """module ID"""
  moduleID: ID

  """organizationID"""
  organizationID: ID!
}

type UpdateMetaType {
  """creatorID"""
  creatorID: ID!

  """meta information"""
  meta: MetaPartialType

  """module ID"""
  moduleID: ID

  """organizationID"""
  organizationID: ID!

  """updateInfo"""
  updateInfo: UpdateInfoType
}

input UpdateModuleInputType {
  """capture"""
  capture: String!

  """module contentID"""
  contentID: ID!

  """module content type"""
  contentType: String!

  """creatorID"""
  creatorID: ID!

  """created date"""
  dateCreated: Float!

  """deleted date"""
  dateDeleted: Float = null

  """updated date"""
  dateUpdated: Float!

  """description"""
  description: String!

  """module duration"""
  duration: String!

  """module index"""
  index: Int

  """ipClient profile/ user"""
  ipClient: String = null

  """isActive"""
  isActive: Boolean! = false

  """language code"""
  language: String!

  """module ID"""
  moduleID: ID!

  """module objection"""
  objections: [ObjectionInputType!] = []

  """organizationID"""
  organizationID: ID!

  """module passRate"""
  passRate: Float = 0.75

  """module questionNumber"""
  questionNumber: Int! = 4

  """module questions"""
  questions: [QuestionInputType!]! = []

  """meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """module summary"""
  summary: [SummaryItemInputType!] = []

  """meta tags: tags that characterises the content"""
  tags: [String!] = []

  """thumbnail image data"""
  thumbnails: ThumbnailsInputType = null

  """module transcriptList"""
  transcriptList: [TranscriptObjectInputType!] = []
}

input UpdateProfileInputType {
  """
  affiliation. An organization that this person is affiliated with. For example, a school/university, a club, or a team.
  """
  affiliation: String

  """avatarSrc"""
  avatarSize: AvatarSizeInputType

  """avatarSrc"""
  avatarSrc: String

  """award. An award won by or for this item. Supersedes awards."""
  awards: [String!]

  """user ID"""
  botID: ID = null

  """contacts"""
  contacts: [String!] = []

  """created date"""
  dateCreated: Float!

  """deleted date"""
  dateDeleted: Float = null

  """updated date"""
  dateUpdated: Float!

  """description"""
  description: String

  """disclaimer"""
  disclaimer: String

  """emails"""
  emails: [String!] = []

  """help"""
  help: String

  """socket ID"""
  idSocket: ID

  """imagePendingSrc"""
  imagePendingSrc: String

  """isActive"""
  isActive: Boolean! = false

  """
  jobTitle. The job title of the person (for example, Financial Manager).
  """
  jobTitle: String

  """locations"""
  locations: [String!] = []

  """messengers"""
  messengers: [MessengerInputType!] = []

  """nameFirst"""
  nameFirst: String

  """nameLast"""
  nameLast: String

  """nameMiddle"""
  nameMiddle: String

  """pendingText"""
  pendingText: String

  """phones"""
  phones: [String!] = []

  """default position profile in the list"""
  position: Float = 0

  """profile ID"""
  profileID: ID!

  """profile ID"""
  profileName: String!

  """profileNature"""
  profileNature: ProfileNatureType!

  """promptExamples"""
  promptExamples: [String!] = []

  """serviceSections"""
  serviceSections: [String!] = []

  """serviceSpecs"""
  serviceSpecs: [String!] = []

  """url. URLs of the item."""
  urls: [String!]

  """user ID"""
  userID: ID!
}

input UpdateTemplatesInputType {
  """templates created date"""
  dateCreated: Date

  """templates deleted date"""
  dateDeleted: Date

  """templates updated date"""
  dateUpdated: Date

  """templates ID"""
  templatesID: ID
}

input UserIdDataAwsCognitoInputType {
  """AWS enum client_app"""
  client_app: String!

  """AWS code from authorisation workflow"""
  code: String

  """AWS redirect_uri"""
  redirect_uri: String!

  """AWS refresh token from post-authorization workflow"""
  refresh_token: String
}

type UserIdDataAwsCognitoType {
  """at hash"""
  at_hash: String

  """
  The user pool app client that authenticated your user. Amazon Cognito renders the same value in the access token client_id claim
  """
  aud: String

  """
  The authentication time, in Unix time format, that your user completed authentication
  """
  auth_time: Float

  """
  An array of the names of user pool groups that have your user as a member
  """
  cognito_groups: [String!]

  """The username of your user in your user pool"""
  cognito_username: String

  """user's email"""
  email: String

  """is email verified"""
  email_verified: Boolean

  """
  The expiration time, in Unix time format, that your user's token expires
  """
  exp: Float

  """
  The issued-at time, in Unix time format, that Amazon Cognito issued your user's token
  """
  iat: Float

  """
  The identity provider that issued the token. The claim has the following format
  """
  iss: String

  """The unique identifier of the JWT"""
  jti: String

  """message along with data"""
  message: String!

  """
  A token-revocation identifier associated with your user's refresh token. Amazon Cognito references the origin_jti claim when it checks if you revoked your user's token with the Revoke endpoint or the RevokeToken API operation. When you revoke a token, Amazon Cognito invalidates all access and ID tokens with the same origin_jti value
  """
  origin_jti: String

  """preferred username"""
  preferred_username: String

  """AWS refresh token from post-authorization workflow"""
  refresh_token: String

  """
  A unique identifier (UUID), or subject, for the authenticated user. The username might not be unique in your user pool. The sub claim is the best way to identify a given user
  """
  sub: ID

  """The intended purpose of the token. In an ID token, its value is id"""
  token_use: String
}

input UserInputType {
  """user first name"""
  nameFirst: String

  """user last name"""
  nameLast: String

  """user middle name"""
  nameMiddle: String

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user login source"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UserModelExtendedType {
  """user first name"""
  nameFirst: String

  """user last name"""
  nameLast: String

  """user middle name"""
  nameMiddle: String
  responseMessage: ResponseMessageType!

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user created date"""
  userDateCreated: Date

  """user deleted date"""
  userDateDeleted: Date

  """user updated date"""
  userDateUpdated: Date

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user timezone"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UserType {
  """user first name"""
  nameFirst: String

  """user last name"""
  nameLast: String

  """user middle name"""
  nameMiddle: String

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user created date"""
  userDateCreated: Date

  """user deleted date"""
  userDateDeleted: Date

  """user updated date"""
  userDateUpdated: Date

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user timezone"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UsersType {
  responseMessage: ResponseMessageType!
  users: [UserType!]!
}
