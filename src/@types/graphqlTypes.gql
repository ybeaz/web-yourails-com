# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AvatarSizeType {
  """height"""
  height: Float

  """width"""
  width: Float
}

type ChoiceType {
  finish_reason: String!
  index: Int!
  message: MessageChoiceType!
}

type CollectionUpdateStatusType {
  """templates ID"""
  collectionName: ID

  """collection updated date"""
  dateUpdated: Float

  """status > whether the collection is updated successfully"""
  statusUpdated: Boolean!
}

input ComparisonFields {
  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID
}

enum CompetencyContentType {
  CompetencyTagType
  ProfileType
  ProjectType
}

type CompetencyTagType {
  """competency ID"""
  competencyID: ID!

  """contentType"""
  contentType: CompetencyContentType!

  """iconLibrary"""
  iconLibrary: String

  """iconName"""
  iconName: String

  """linkHref"""
  linkHref: String

  """profile ID"""
  profileID: ID!

  """section"""
  section: String

  """title"""
  title: String

  """tooltips"""
  tooltips: String
}

input CompetencyTagsInputType {
  """competencyTags created date"""
  competencyTagsDateCreated: Date

  """competencyTags deleted date"""
  competencyTagsDateDeleted: Date

  """competencyTags updated date"""
  competencyTagsDateUpdated: Date

  """competencyTags ID"""
  idCompetencyTags: ID
}

input CompetencyTagsParamsReadType {
  """first item"""
  profileID: String
}

type CourseEdgeType {
  """cursor"""
  cursor: String

  """Course"""
  node: CourseType
}

type CourseType {
  """course capture"""
  capture: String!

  """courses ID"""
  courseID: ID!

  """courses created date"""
  dateCreated: Float!

  """courses deleted date"""
  dateDeleted: Float

  """courses updated date"""
  dateUpdated: Float!

  """course description"""
  description: String!

  """ipClient profile/ user"""
  ipClient: String

  """isActive"""
  isActive: Boolean!

  """language code"""
  language: String!

  """courses meta information"""
  meta: MetaCourseType

  """courses modules"""
  modules: [ModuleType!]

  """courses passRate"""
  passRate: Float

  """profile ID"""
  profileID: ID!

  """courses questionNumber"""
  questionNumber: Int!
}

type CoursesConnectionType {
  """[CoursesEdgeType]"""
  edges: [CourseEdgeType!]

  """CoursesPageInfoType"""
  pageInfo: CoursesPageInfoType
}

type CoursesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

input CreateCourseInputType {
  """course capture"""
  capture: String!

  """courses ID"""
  courseID: ID

  """course description"""
  description: String!

  """isActive"""
  isActive: Boolean! = false

  """language code"""
  language: String!

  """courses meta information"""
  meta: MetaCourseInputType

  """courses modules"""
  modules: [ModuleInputType!]

  """courses passRate"""
  passRate: Float

  """profile ID"""
  profileID: ID!

  """courses questionNumber"""
  questionNumber: Int!
}

input CreateDocumentInputType {
  """capture"""
  capture: String!

  """contentIDs"""
  contentIDs: [String!]!

  """courseID"""
  courseID: ID!

  """description"""
  description: String = null

  """isActive"""
  isActive: Boolean! = false

  """language"""
  language: String!

  """meta"""
  meta: MetaDocumentInputType!

  """moduleIDs"""
  moduleIDs: [String!]!

  """userID"""
  profileID: String!

  """userName"""
  profileProps: ProfilePropsInputType!
}

input CreateTemplatesInputType {
  """templates created date"""
  dateCreated: Date

  """templates deleted date"""
  dateDeleted: Date

  """templates updated date"""
  dateUpdated: Date

  """templates ID"""
  templatesID: ID
}

"""Date custom scalar type"""
scalar Date

type DocumentEdgeType {
  """cursor"""
  cursor: String

  """Document"""
  node: DocumentType
}

type DocumentType {
  """course capture"""
  capture: String!

  """contentIDs"""
  contentIDs: [String!]!

  """courseID"""
  courseID: ID!

  """courses created date"""
  dateCreated: Float!

  """courses deleted date"""
  dateDeleted: Float

  """courses updated date"""
  dateUpdated: Float!

  """course description"""
  description: String!

  """documentID"""
  documentID: ID!

  """ipClient profile/ user"""
  ipClient: String

  """isActive"""
  isActive: Boolean!

  """language code"""
  language: String!

  """meta"""
  meta: MetaDocumentType!

  """moduleIDs"""
  moduleIDs: [String!]!

  """pathName of the document"""
  pathName: String!

  """profileID"""
  profileID: ID!

  """userName"""
  profileProps: ProfilePropsType!
}

type DocumentsConnectionType {
  """[DocumentsEdgeType]"""
  edges: [DocumentEdgeType!]

  """DocumentsPageInfoType"""
  pageInfo: DocumentsPageInfoType
}

type DocumentsPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type ImageDataOpenAiType {
  b64_json: String
  url: String
}

input ImageOpenAiInputType {
  n: Int!
  prompt: String!
  response_format: String
  size: String!
}

type ImagesOpenAiType {
  created: Int!
  data: [ImageDataOpenAiType!]!
}

input MessageAssistantInputType {
  messages: [MessageChoiceInputType!]!
  model: String!
  temperature: Float!
}

type MessageAssistantType {
  choices: [ChoiceType!]!
}

input MessageChoiceInputType {
  content: String
  role: String!
}

type MessageChoiceType {
  content: String
  role: String!
}

type MessengerType {
  """name"""
  name: String

  """profileName"""
  profileName: String
}

input MetaCourseInputType {
  """course meta email"""
  email: String!

  """course meta institution"""
  institution: String!

  """course meta isSendingBcc"""
  isSendingBcc: Boolean! = false

  """course meta specName"""
  specName: String!

  """course meta specTitle"""
  specTitle: String!

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """
  courses meta tags: tags that characterises the course content, its marketing features
  """
  tags: [String!] = []
}

type MetaCourseType {
  """course meta email"""
  email: String!

  """course meta institution"""
  institution: String!

  """course meta isSendingBcc"""
  isSendingBcc: Boolean!

  """course meta specName"""
  specName: String!

  """course meta specTitle"""
  specTitle: String!

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!]

  """courses meta tags: tags that characterises the course content"""
  tags: [String!]
}

input MetaDocumentInputType {
  """ email"""
  email: String = null

  """institution"""
  institution: String!

  """isSendingBcc to the email"""
  isSendingBcc: Boolean! = false

  """specName"""
  specName: String!

  """specTitle"""
  specTitle: String = null

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!] = []

  """courses meta tags: tags that characterises the course content"""
  tags: [String!] = []
}

type MetaDocumentType {
  """ email"""
  email: String

  """institution"""
  institution: String!

  """isSendingBcc to the email"""
  isSendingBcc: Boolean!

  """specName"""
  specName: String!

  """specTitle"""
  specTitle: String

  """courses meta stages: stages/ statuses/ envs"""
  stages: [String!]

  """courses meta tags: tags that characterises the course content"""
  tags: [String!]
}

input ModuleInputType {
  """course module capture"""
  capture: String!

  """course module contentID"""
  contentID: ID!

  """course module content type"""
  contentType: String!

  """course module capture"""
  description: String

  """course module duration"""
  duration: String!

  """course module index"""
  index: Int!

  """isActive"""
  isActive: Boolean! = false

  """course module ID"""
  moduleID: ID

  """course module questions"""
  questions: [QuestionInputType!]!
}

type ModuleType {
  """course module capture"""
  capture: String!

  """course module contentID"""
  contentID: ID!

  """course module content type"""
  contentType: String!

  """course module capture"""
  description: String

  """course module duration"""
  duration: String!

  """course module index"""
  index: Int!

  """isActive"""
  isActive: Boolean!

  """course module ID"""
  moduleID: ID!

  """course module questions"""
  questions: [QuestionType!]!
}

type Mutation {
  addRecipe(newRecipeData: NewRecipeInputType!): RecipeType!
  createCompetencyTags(competencyTagsInput: CompetencyTagsInputType!): [CompetencyTagType!]!
  createCourses(createCoursesInput: [CreateCourseInputType!]!): [CourseType!]!
  createDocuments(createDocumentsInput: [CreateDocumentInputType!]!): [DocumentType!]!
  createProfiles(profilesInput: ProfilesInputType!): [ProfileType!]!
  createTemplates(createTemplatesInput: CreateTemplatesInputType!): [TemplatesType!]!
  createUser(userInputType: UserInputType!): UserModelExtendedType!
  deactivateCourses(deactivateCoursesIdsInput: [String!]!): [String!]!
  deactivateDocuments(deactivateDocumentsIdsInput: [String!]!): [String!]!
  deleteCompetencyTags(idCompetencyTags: String!): [CompetencyTagType!]!
  deleteCourses(deleteCoursesIdsInput: [String!]!): [String!]!
  deleteDocuments(deleteDocumentsIdsInput: [String!]!): [String!]!
  deleteProfiles(idProfiles: String!): [ProfileType!]!
  deleteTemplates(deleteTemplatesIdsInput: [String!]!): [String!]!
  deleteUser(userIdAuth: String!, userIdProfile: String!): UserModelExtendedType!
  removeRecipe(id: String!): Boolean!
  updateCollections(collections: [String!]!): [CollectionUpdateStatusType!]!
  updateCompetencyTags(competencyTagsInput: CompetencyTagsInputType!): [CompetencyTagType!]!
  updateCourses(updateCoursesInput: [UpdateCourseInputType!]!): [CourseType!]!
  updateProfiles(profilesInput: ProfilesInputType!): [ProfileType!]!
  updateTemplates(updateTemplatesInput: UpdateTemplatesInputType!): [TemplatesType!]!
  updateUser(userInputType2: UserInputType!): UserModelExtendedType!
}

input NewRecipeInputType {
  description: String
  ingredients: [String!]!
  title: String!
}

input OptionInputType {
  """course module question option label"""
  label: String!

  """courses module question option ID"""
  optionID: ID

  """course module question option status: true or false"""
  status: Boolean!
}

type OptionType {
  """course module question option label"""
  label: String!

  """courses module question option ID"""
  optionID: ID

  """course module question option status: true or false"""
  status: Boolean!
}

type ProfileEdgeType {
  """cursor"""
  cursor: String

  """ProfileEdgeType"""
  node: ProfileType
}

enum ProfileNatureType {
  bot
  company
  human
}

input ProfilePropsInputType {
  nameFirst: String!
  nameLast: String!
  nameMiddle: String!
}

type ProfilePropsType {
  nameFirst: String!
  nameLast: String!
  nameMiddle: String!
}

type ProfileType {
  """avatarSrc"""
  avatarSize: AvatarSizeType

  """avatarSrc"""
  avatarSrc: String

  """contacts"""
  contacts: [String!]

  """disclaimer"""
  disclaimer: String

  """emails"""
  emails: [String!]

  """help"""
  help: String

  """socket ID"""
  idSocket: ID

  """imagePendingSrc"""
  imagePendingSrc: String

  """isActive"""
  isActive: Boolean!

  """locations"""
  locations: [String!]

  """messengers"""
  messengers: [MessengerType!]

  """nameFirst"""
  nameFirst: String

  """nameLast"""
  nameLast: String

  """pendingText"""
  pendingText: String

  """phones"""
  phones: [String!]

  """default position profile in the list"""
  position: Float

  """profile ID"""
  profileID: ID!

  """profile ID"""
  profileName: String!

  """profileNature"""
  profileNature: ProfileNatureType!

  """promptExamples"""
  promptExamples: [String!]

  """serviceSections"""
  serviceSections: [String!]

  """serviceSpecs"""
  serviceSpecs: [String!]

  """summary"""
  summary: String

  """user ID"""
  userID: ID!
}

type ProfilesConnectionType {
  """[ProfileEdgeType]"""
  edges: [ProfileEdgeType!]

  """ProfilesPageInfoType"""
  pageInfo: ProfilesPageInfoType
}

input ProfilesInputType {
  """profiles ID"""
  idProfiles: ID

  """profiles created date"""
  profilesDateCreated: Date

  """profiles deleted date"""
  profilesDateDeleted: Date

  """profiles updated date"""
  profilesDateUpdated: Date
}

type ProfilesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type Query {
  getAuthAwsCognitoUserData(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputType!): UserIdDataAwsCognitoType!
  getAuthAwsCognitoUserRefreshed(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputType!): UserIdDataAwsCognitoType!
  getAuthAwsCognitoUserRevoked(userIdDataAwsCognitoInput: UserIdDataAwsCognitoInputType!): UserIdDataAwsCognitoType!
  getImagesOpenAi(imageOpenAiInput: ImageOpenAiInputType!): ImagesOpenAiType!
  getMessageAssistant(messageAssistantInput: MessageAssistantInputType!): MessageAssistantType!
  readCompetencyTags(params: CompetencyTagsParamsReadType!): [CompetencyTagType!]!
  readCourses(readCoursesInput: [ReadCourseInputType!]!): [CourseType!]!
  readCoursesAll: [CourseType!]!
  readCoursesConnection(readCoursesConnectionInput: ReadCoursesConnectionInputType!): CoursesConnectionType!
  readDocuments(readDocumentsIdsInput: [String!]!): [DocumentType!]!
  readDocumentsAll: [DocumentType!]!
  readDocumentsConnection(readDocumentsConnectionInput: ReadDocumentsConnectionInputType!): DocumentsConnectionType!
  readProfiles: [ProfileType!]!
  readProfilesConnection(readProfilesConnectionInput: ReadProfilesConnectionInputType!): ProfilesConnectionType!
  readRecipe(id: String!): RecipeType!
  readRecipes(skip: Int! = 0, take: Int! = 25): [RecipeType!]!
  readTemplates(readTemplatesInput: [String!]!): [TemplatesType!]!
  readTemplatesAll: [TemplatesType!]!
  readTemplatesConnection(readTemplatesConnectionInput: ReadTemplatesConnectionInputType!): TemplatesConnectionType!
  readUserAuth(userIdAuth: String!): UserModelExtendedType!
  readUserProfile(userIdProfile: String!): UserModelExtendedType!
  readUsers(options: ReadUsersOptions!): UsersType!
  sendEmailDocument(documentID: String!, sendBcc: String!, sendCc: String!, sendTo: String!): DocumentType!
}

input QuestionInputType {
  """course module question capture"""
  capture: String!

  """course module question designType"""
  designType: String

  """course module question isActive"""
  isActive: Boolean! = false

  """designType > multi"""
  multi: Boolean = false

  """course module question options"""
  options: [OptionInputType!]!

  """courses module question ID"""
  questionID: ID

  """course module question topic"""
  topic: String
}

type QuestionType {
  """course module question capture"""
  capture: String!

  """course module question designType"""
  designType: String

  """course module question isActive"""
  isActive: Boolean!

  """designType > multi"""
  multi: Boolean

  """course module question options"""
  options: [OptionType!]!

  """courses module question ID"""
  questionID: ID

  """course module question topic"""
  topic: String
}

input ReadCourseInputType {
  """course ID"""
  courseID: ID

  """module ID"""
  moduleID: ID
}

input ReadCoursesConnectionInputType {
  """
  after: Specifies a cursor that indicates the starting point for the next set of data to retrieve.
  """
  after: String

  """
  first: Specifies the number of items to return from the beginning of the dataset.
  """
  first: Int

  """isActive"""
  isActive: Boolean = false

  """
  offset: Similar to "First," it specifies the maximum number of items to return. if offset === 0 then the function returns ALL docs after the first number
  """
  offset: Int

  """option to sort by a field: 1 ascending, -1 descending"""
  sort: SortCoursesInputType

  """
  courses meta stages: stages/ statuses/ envs to omit with that selection of the documents
  """
  stagesOmit: [String!] = []

  """
  courses meta stages: stages/ statuses/ envs to pick from the set of documents
  """
  stagesPick: [String!] = []

  """
  courses meta tags: tags that characterises the course content to omit with that selection of the documents
  """
  tagsOmit: [String!] = []

  """
  courses meta tags: tags that characterises the course content to pick from the set of documents
  """
  tagsPick: [String!] = []
}

input ReadDocumentsConnectionInputType {
  """
  after: Specifies a cursor that indicates the starting point for the next set of data to retrieve.
  """
  after: String

  """
  first: Specifies the number of items to return from the beginning of the dataset.
  """
  first: Int

  """isActive"""
  isActive: Boolean = false

  """
  offset: Similar to "First," it specifies the maximum number of items to return. if offset === 0 then the function returns ALL docs after the first number
  """
  offset: Int

  """option to sort by a field: 1 ascending, -1 descending"""
  sort: SortDocumentsInputType

  """
  courses meta stages: stages/ statuses/ envs to omit with that selection of the documents
  """
  stagesOmit: [String!] = []

  """
  courses meta stages: stages/ statuses/ envs to pick from the set of documents
  """
  stagesPick: [String!] = []

  """
  courses meta tags: tags that characterises the course content to omit with that selection of the documents
  """
  tagsOmit: [String!] = []

  """
  courses meta tags: tags that characterises the course content to pick from the set of documents
  """
  tagsPick: [String!] = []
}

input ReadProfilesConnectionInputType {
  """after"""
  after: String

  """first"""
  first: Int

  """offset"""
  offset: Int
}

input ReadTemplatesConnectionInputType {
  """after"""
  after: String

  """first"""
  first: Int

  """offset"""
  offset: Int
}

input ReadUsersOptions {
  """
  user fields equal to, see https://docs.mongodb.com/manual/reference/operator/query/eq/
  """
  eq: [ComparisonFields!]

  """The option to search for active or not recods in user document"""
  isActive: Boolean = true

  """
  user fields equal to, see https://docs.mongodb.com/manual/reference/operator/query/ne/
  """
  ne: [ComparisonFields!]
}

type RecipeType {
  creationDate: String!
  description: String
  id: ID!
  ingredients: [String!]!
  title: String!
}

type ResponseMessageType {
  """description message"""
  message: String

  """status: success or failure"""
  status: String
}

input SortCoursesInputType {
  """sorting direction: 1 ascending, -1 descending"""
  direction: Float! = -1

  """property name to sort by"""
  prop: String! = "dateUpdated"
}

input SortDocumentsInputType {
  """sorting direction: 1 ascending, -1 descending"""
  direction: Float! = -1

  """property name to sort by"""
  prop: String! = "dateUpdated"
}

type Subscription {
  documentAdded: DocumentType!
  recipeAdded: RecipeType!
}

type TemplatesConnectionType {
  """[TemplatesEdgeType]"""
  edges: [TemplatesEdgeType!]

  """TemplatesPageInfoType"""
  pageInfo: TemplatesPageInfoType
}

type TemplatesEdgeType {
  """cursor"""
  cursor: String

  """TemplatesEdgeType"""
  node: TemplatesType
}

type TemplatesPageInfoType {
  """endCursor"""
  endCursor: String

  """hasNextPage"""
  hasNextPage: Boolean
}

type TemplatesType {
  """templates created date"""
  dateCreated: Date

  """templates deleted date"""
  dateDeleted: Date

  """templates updated date"""
  dateUpdated: Date

  """isActive"""
  isActive: Boolean!

  """templates ID"""
  templatesID: ID
}

input UpdateCourseInputType {
  """course capture"""
  capture: String!

  """courses ID"""
  courseID: ID!

  """courses created date"""
  dateCreated: Float!

  """courses deleted date"""
  dateDeleted: Float

  """courses updated date"""
  dateUpdated: Float!

  """course description"""
  description: String!

  """isActive"""
  isActive: Boolean! = false

  """language code"""
  language: String!

  """courses meta information"""
  meta: MetaCourseInputType

  """courses modules"""
  modules: [ModuleInputType!]

  """courses passRate"""
  passRate: Float

  """profile ID"""
  profileID: ID!

  """courses questionNumber"""
  questionNumber: Int!
}

input UpdateTemplatesInputType {
  """templates created date"""
  dateCreated: Date

  """templates deleted date"""
  dateDeleted: Date

  """templates updated date"""
  dateUpdated: Date

  """templates ID"""
  templatesID: ID
}

input UserIdDataAwsCognitoInputType {
  """AWS enum client_app"""
  client_app: String!

  """AWS code from authorisation workflow"""
  code: String

  """AWS redirect_uri"""
  redirect_uri: String!

  """AWS refresh token from post-authorization workflow"""
  refresh_token: String
}

type UserIdDataAwsCognitoType {
  """at hash"""
  at_hash: String

  """
  The user pool app client that authenticated your user. Amazon Cognito renders the same value in the access token client_id claim
  """
  aud: String

  """
  The authentication time, in Unix time format, that your user completed authentication
  """
  auth_time: Float

  """
  An array of the names of user pool groups that have your user as a member
  """
  cognito_groups: [String!]

  """The username of your user in your user pool"""
  cognito_username: String

  """user's email"""
  email: String

  """is email verified"""
  email_verified: Boolean

  """
  The expiration time, in Unix time format, that your user's token expires
  """
  exp: Float

  """
  The issued-at time, in Unix time format, that Amazon Cognito issued your user's token
  """
  iat: Float

  """
  The identity provider that issued the token. The claim has the following format
  """
  iss: String

  """The unique identifier of the JWT"""
  jti: String

  """message along with data"""
  message: String!

  """
  A token-revocation identifier associated with your user's refresh token. Amazon Cognito references the origin_jti claim when it checks if you revoked your user's token with the Revoke endpoint or the RevokeToken API operation. When you revoke a token, Amazon Cognito invalidates all access and ID tokens with the same origin_jti value
  """
  origin_jti: String

  """preferred username"""
  preferred_username: String

  """AWS refresh token from post-authorization workflow"""
  refresh_token: String

  """
  A unique identifier (UUID), or subject, for the authenticated user. The username might not be unique in your user pool. The sub claim is the best way to identify a given user
  """
  sub: ID

  """The intended purpose of the token. In an ID token, its value is id"""
  token_use: String
}

input UserInputType {
  """user first name"""
  nameFirst: String

  """user last name"""
  nameLast: String

  """user middle name"""
  nameMiddle: String

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user login source"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UserModelExtendedType {
  """user first name"""
  nameFirst: String

  """user last name"""
  nameLast: String

  """user middle name"""
  nameMiddle: String
  responseMessage: ResponseMessageType!

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user created date"""
  userDateCreated: Date

  """user deleted date"""
  userDateDeleted: Date

  """user updated date"""
  userDateUpdated: Date

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user timezone"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UserType {
  """user first name"""
  nameFirst: String

  """user last name"""
  nameLast: String

  """user middle name"""
  nameMiddle: String

  """user avatar"""
  userAvatar: String

  """user year of birthday"""
  userBirthYear: Float

  """user created date"""
  userDateCreated: Date

  """user deleted date"""
  userDateDeleted: Date

  """user updated date"""
  userDateUpdated: Date

  """user email"""
  userEmail: String

  """user gender"""
  userGender: String

  """user ID"""
  userIdAuth: ID

  """user ID"""
  userIdProfile: ID

  """user short information"""
  userInfoAbout: String

  """user speaking languages"""
  userLanguages: [String!]

  """user city location"""
  userLocaleCity: String

  """user country location"""
  userLocaleCountry: String

  """user timezone"""
  userLoginSource: String

  """user media"""
  userMedia: [String!]

  """user accepted/ visible name as a result of registration"""
  userName: String

  """user accepted/ visible name to display other people"""
  userNameNick: String!

  """user telephone number"""
  userPhone: Float

  """user roles to perform actions"""
  userRoles: [String!]

  """user set of skills, expertises"""
  userSkillsExpertise: [String!]

  """user timezone"""
  userTimeZone: String

  """user web site"""
  userWebLink: String
}

type UsersType {
  responseMessage: ResponseMessageType!
  users: [UserType!]!
}
